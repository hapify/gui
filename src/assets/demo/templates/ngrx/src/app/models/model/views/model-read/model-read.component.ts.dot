import {Component, OnDestroy, OnInit} from '@angular/core';
import {ActivatedRoute} from '@angular/router';
import {Router} from '@angular/router';
import {Subscription} from 'rxjs/Subscription';
import {ErrorService} from '@app/messages';
import {{{=it.m.names.upperCamel}}} from '../../{{=it.m.names.hyphen}}';
import {{{=it.m.names.upperCamel}}Service} from '../../{{=it.m.names.hyphen}}.service';

@Component({
  selector: 'anms-{{=it.m.names.hyphen}}-read',
  templateUrl: './{{=it.m.names.hyphen}}-read.component.html',
  styleUrls: ['./{{=it.m.names.hyphen}}-read.component.scss']
})
export class {{=it.m.names.upperCamel}}ReadComponent implements OnInit, OnDestroy {

  /**
   * The {{=it.m.names.wordsLower}}
   *
   * @type {{{=it.m.names.upperCamel}}}
   */
  {{=it.m.names.lowerCamel}}: {{=it.m.names.upperCamel}};

  /**
   * The id subscription
   */
  idSubscription: Subscription;

  /**
   * Constructor
   *
   * @param {ActivatedRoute} route
   * @param {Router} router
   * @param {ErrorService} errorService
   * @param {{{=it.m.names.upperCamel}}Service} {{=it.m.names.lowerCamel}}Service
   */
  constructor(private route: ActivatedRoute,
              private router: Router,
              private errorService: ErrorService,
              private {{=it.m.names.lowerCamel}}Service: {{=it.m.names.upperCamel}}Service) {
  }

  /**
   * Init
   */
  ngOnInit() {
    // Get the {{=it.m.names.wordsLower}} after reading the id
    this.idSubscription = this.route.params.subscribe(params => {
      this.{{=it.m.names.lowerCamel}}Service.get(params['id'])
        .then(({{=it.m.names.lowerCamel}}: {{=it.m.names.upperCamel}}) => {
          this.{{=it.m.names.lowerCamel}} = {{=it.m.names.lowerCamel}};
        })
        .catch((error) => this.errorService.handle(error));
    });
  }

  /**
   * Destroy
   */
  ngOnDestroy() {
    this.idSubscription.unsubscribe();
  }

  /**
   * Called when the {{=it.m.names.wordsLower}} is deleted
   */
  on{{=it.m.names.upperCamel}}Delete(): void {
    this.router.navigateByUrl('/{{=it.m.names.hyphen}}');
  }
}
