import {Subject} from 'rxjs/Subject';
import {Helpers} from '@app/shared';

/**
 * Used to export and import search params
 */
export interface UserSearchParamsInterface {
  first_name?: string;
  last_name?: string;
  creation?: string | number | Date;
  creation__min?: string | number | Date;
  creation__max?: string | number | Date;
  validated?: string | boolean;
  score?: string | number;
  score__min?: string | number;
  score__max?: string | number;
  _page?: string | number;
  _limit?: string | number;
  _sort?: string;
  _order?: string;
}

/**
 * List allowed keys for the interface
 *
 * @type {string[]}
 * @private
 */
const AllowedKeys: string[] = [
  "first_name",
  "last_name",
  "creation",
  "creation__min",
  "creation__max",
  "validated",
  "score",
  "score__min",
  "score__max",
  "_page",
  "_limit",
  "_sort",
  "_order"
];

/**
 * Manage user search params
 */
export class UserSearchParams extends Subject<void> {

  /**
   * Stores the properties of the instance
   */
  props: UserSearchParamsInterface;

  /**
   * Default page number
   *
   * @type {number}
   */
  defaultPage = 0;

  /**
   * Default page length
   *
   * @type {number}
   */
  defaultLimit = 10;

  /**
   * Constructor
   */
  constructor() {
    super();
    // Create from nothing
    this.fromObject({});
  }

  /**
   * Populate the instance from an object (extracted from query string)
   *
   * @param {UserSearchParamsInterface} input
   */
  fromObject(input: UserSearchParamsInterface): void {
    // Clone object with allowed keys only
    const props: UserSearchParamsInterface = {};
    AllowedKeys.map((key: string) => {
      if (typeof input[key] !== 'undefined')
        props[key] = input[key];
    });
    // Keep default values
    if (typeof props._page === 'undefined') props._page = this.defaultPage;
    if (typeof props._limit === 'undefined') props._limit = this.defaultLimit;
    // Convert booleans
    if (typeof props.validated !== 'undefined')
      props.validated = Helpers.convertToBoolean(props.validated);
    // Convert dates
    if (typeof props.creation !== 'undefined')
      props.creation = Helpers.convertToDate(props.creation);
    if (typeof props.creation__min !== 'undefined')
      props.creation__min = Helpers.convertToDate(props.creation__min);
    if (typeof props.creation__max !== 'undefined')
      props.creation__max = Helpers.convertToDate(props.creation__max);
    // Assign values
    this.props = props;
    this.next();
  }

  /**
   * Convert the instance to an object readable for the API and storable in the query string
   *
   * @return {UserSearchParamsInterface}
   */
  toObject(): UserSearchParamsInterface {

    // Filter not allowed, undefined and null values
    const props: UserSearchParamsInterface = {};
    AllowedKeys.map(Helpers.prepareObjectForApi(this.props, props));

    // Avoid conflict in values
    if (typeof props.creation !== 'undefined') {
      delete props.creation__min;
      delete props.creation__max;
    }
    if (typeof props.score !== 'undefined') {
      delete props.score__min;
      delete props.score__max;
    }

    // Convert booleans
    if (typeof props.validated !== 'undefined')
      props.validated = props.validated ? "true" : "false";

    return props;
  }

}
