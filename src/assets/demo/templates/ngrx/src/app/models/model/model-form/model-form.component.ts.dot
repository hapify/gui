import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';
import {FormBuilder, FormGroup, FormControl, Validators} from '@angular/forms';
import {{{=it.m.names.upperCamel}}} from '../{{=it.m.names.hyphen}}';

@Component({
  selector: 'anms-{{=it.m.names.hyphen}}-form',
  templateUrl: './{{=it.m.names.hyphen}}-form.component.html',
  styleUrls: ['./{{=it.m.names.hyphen}}-form.component.scss']
})
export class {{=it.m.names.upperCamel}}FormComponent implements OnInit {

  /**
   * The {{=it.m.names.wordsLower}} to inject in the form
   */
  @Input() {{=it.m.names.lowerCamel}}: {{=it.m.names.upperCamel}};

  /**
   * Denotes if the form will be used for creation or edition
   */
  @Input() edition: boolean = false;

  /**
   * Called the save button is clicked
   *
   * @type {EventEmitter<void>}
   */
  @Output() onSave = new EventEmitter<void>();

  /**
   * @type {FormGroup}
   */
  form: FormGroup;

  /**
   * Constructor
   *
   * @param {FormBuilder} formBuilder
   */
  constructor(private formBuilder: FormBuilder) {
  }

  /**
   * Init
   */
  ngOnInit() {
    const required = this.edition ? [] : [Validators.required];
    // Form validator
    this.form = this.formBuilder.group({{{~it.m.f.l : f}}{{? !f.internal }}
      {{=f.names.underscore}}: new FormControl(this.{{=it.m.names.lowerCamel}}.props.{{=f.names.underscore}}, [].concat(required)),{{?}}{{~}}
    });
  }

  /**
   * Called on form submit
   */
  onSubmit(): void {
    this.onSave.next();
  }


}
