import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';
import {FormBuilder, FormGroup, FormControl, Validators} from '@angular/forms';
import {ErrorService} from '@app/messages';
import {Helpers} from '@app/shared';
import {{{=it.m.names.upperCamel}}{{?it.m.d.s}}, {{=it.m.names.upperCamel}}Interface{{?}}} from '../{{=it.m.names.hyphen}}';
import {{{=it.m.names.upperCamel}}Service} from '../{{=it.m.names.hyphen}}.service';{{~it.m.d.f(f => !f.internal): d}}
import {{{=d.names.upperCamel}}, {{=d.names.upperCamel}}Interface} from '../../{{=d.names.hyphen}}/{{=d.names.hyphen}}';
import {{{=d.names.upperCamel}}Service} from '../../{{=d.names.hyphen}}/{{=d.names.hyphen}}.service';{{~}}

@Component({
  selector: 'anms-{{=it.m.names.hyphen}}-form',
  templateUrl: './{{=it.m.names.hyphen}}-form.component.html',
  styleUrls: ['./{{=it.m.names.hyphen}}-form.component.scss']
})
export class {{=it.m.names.upperCamel}}FormComponent implements OnInit {

  /**
   * The {{=it.m.names.wordsLower}} to inject in the form
   */
  @Input() {{=it.m.names.lowerCamel}}: {{=it.m.names.upperCamel}};

  /**
   * Called the save button is clicked for a new instance
   *
   * @type {EventEmitter<{{=it.m.names.upperCamel}}>}
   */
  @Output() onCreate = new EventEmitter<{{=it.m.names.upperCamel}}>();

  /**
   * Called the save button is clicked for an existing instance
   *
   * @type {EventEmitter<{{=it.m.names.upperCamel}}>}
   */
  @Output() onUpdate = new EventEmitter<{{=it.m.names.upperCamel}}>();

  /**
   * @type {FormGroup}
   */
  form: FormGroup;{{~it.m.f.r.f(r => !r.internal) : r}}

  /**
   * The list to show in the {{=r.names.wordsLower}} drop-down
   *
   * @type {{{=r.m.names.upperCamel}}[]}
   */
  {{=r.names.lowerCamel}}List: {{=r.m.names.upperCamel}}[] = [];{{~}}

  /**
   * Constructor
   *
   * @param {FormBuilder} formBuilder
   * @param {ErrorService} errorService
   * @param {{{=it.m.names.upperCamel}}Service} {{=it.m.names.lowerCamel}}Service{{~it.m.d.f(f => !f.internal): d}}
   * @param {{{=d.names.upperCamel}}Service} {{=d.names.lowerCamel}}Service{{~}}
   */
  constructor(private formBuilder: FormBuilder,
              private errorService: ErrorService,
              private {{=it.m.names.lowerCamel}}Service: {{=it.m.names.upperCamel}}Service{{~it.m.d.f(f => !f.internal): d}},
              private {{=d.names.lowerCamel}}Service: {{=d.names.upperCamel}}Service{{~}}) {
  }

  /**
   * Init
   */
  ngOnInit() {
    // If no instance, create a new one
    if (!this.{{=it.m.names.lowerCamel}}) {
      this.{{=it.m.names.lowerCamel}} = new {{=it.m.names.upperCamel}}();
    }
    // Form validator{{?it.m.f.l.find(f => f.isPrivate && !f.internal)}}
    const privateRequired = this.{{=it.m.names.lowerCamel}}.isNew() ? [Validators.required] : [];{{?}}
    this.form = this.formBuilder.group({{{~it.m.f.f(f => !f.internal) : f}}
      {{=f.names.underscore}}: new FormControl(this.{{=it.m.names.lowerCamel}}.props.{{=f.names.underscore}}, {{? f.isPrivate }}[].concat(privateRequired){{??}}[Validators.required]{{?}}),{{~}}
    });{{~it.m.f.r.f(r => !r.internal) : r}}
    // Get {{=r.names.wordsLower}} list
    this.{{=r.m.names.lowerCamel}}Service.list({ _page: 0, _limit: 100 })
      .then(({{=r.m.names.lowerCamel}}List) => {
        this.{{=r.names.lowerCamel}}List = {{=r.m.names.lowerCamel}}List.items;
      });{{~}}
  }

  /**
   * Called on form submit
   */
  onSubmit(): void {
    // Create payload
    const props = this.{{=it.m.names.lowerCamel}}.toObject();
    const payload = {{{~it.m.f.f(f => !f.internal) : f}}{{?f.type==='datetime'}}
      {{=f.names.underscore}}: <number>props.{{=f.names.underscore}},{{??f.type==='entity'}}
      {{=f.names.underscore}}: (<{{=f.m.names.upperCamel}}Interface>props.{{=f.names.underscore}}).{{=f.m.f.p.names.underscore}},{{??}}
      {{=f.names.underscore}}: props.{{=f.names.underscore}},{{?}}{{~}}
    };
    // Creation or update ?
    if (this.{{=it.m.names.lowerCamel}}.isNew()) {
      // Creation
      this.{{=it.m.names.lowerCamel}}Service.create(payload)
        .then(({{=it.m.names.lowerCamel}}: {{=it.m.names.upperCamel}}) => {
          this.onCreate.next({{=it.m.names.lowerCamel}});
        })
        .catch((error) => this.errorService.handle(error));
    } else {
      // Update
      this.{{=it.m.names.lowerCamel}}Service.update(this.{{=it.m.names.lowerCamel}}.getId(), payload)
        .then(() => {
          this.onUpdate.next(this.{{=it.m.names.lowerCamel}});
        })
        .catch((error) => this.errorService.handle(error));
    }
  }

  /**
   * Compare two entities
   *
   * @param e1
   * @param e2
   * @return {boolean}
   */
  compareEntities(e1: any, e2: any): boolean {
    return Helpers.compareEntities(e1, e2);
  }

}
