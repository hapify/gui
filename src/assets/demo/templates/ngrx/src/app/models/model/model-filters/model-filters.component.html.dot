{{~it.m.f.se : f}}
{{?f.type==='string'}}
<!-- {{=f.names.wordsUpper}} -->
<mat-form-field class="w-100">
    <input matInput
           (keyup)="onChange();"
           placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}' | translate {{=it.c}}"
           [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}">
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} -->
{{??f.type==='number'}}
<!-- {{=f.names.wordsUpper}} -->
<mat-form-field class="w-100">
    <input matInput
           type="number"
           (change)="onChange();"
           (keyup)="onChange();"
           placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}' | translate {{=it.c}}"
           [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}">
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} -->

<!-- {{=f.names.wordsUpper}} min -->
<mat-form-field class="w-100">
    <input matInput
           type="number"
           (change)="onChange();"
           (keyup)="onChange();"
           placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}__min' | translate {{=it.c}}"
           [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}__min">
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} min -->

<!-- {{=f.names.wordsUpper}} max -->
<mat-form-field class="w-100">
    <input matInput
           type="number"
           (change)="onChange();"
           (keyup)="onChange();"
           placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}__max' | translate {{=it.c}}"
           [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}__max">
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} max -->
{{??f.type==='datetime'}}
<!-- {{=f.names.wordsUpper}} -->
<mat-form-field class="w-100">
    <input matInput
           [matDatepicker]="picker_{{=f.names.underscore}}"
           (dateChange)="onChange();"
           placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}' | translate {{=it.c}}"
           [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}">
    <mat-datepicker-toggle matSuffix [for]="picker_{{=f.names.underscore}}"></mat-datepicker-toggle>
    <mat-datepicker #picker_{{=f.names.underscore}}></mat-datepicker>
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} -->

<!-- {{=f.names.wordsUpper}} min -->
<mat-form-field class="w-100">
    <input matInput
           [matDatepicker]="picker_{{=f.names.underscore}}__min"
           (dateChange)="onChange();"
           placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}__min' | translate {{=it.c}}"
           [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}__min">
    <mat-datepicker-toggle matSuffix [for]="picker_{{=f.names.underscore}}__min"></mat-datepicker-toggle>
    <mat-datepicker #picker_{{=f.names.underscore}}__min></mat-datepicker>
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} min -->

<!-- {{=f.names.wordsUpper}} max -->
<mat-form-field class="w-100">
    <input matInput
           [matDatepicker]="picker_{{=f.names.underscore}}__max"
           (dateChange)="onChange();"
           placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}__max' | translate {{=it.c}}"
           [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}__max">
    <mat-datepicker-toggle matSuffix [for]="picker_{{=f.names.underscore}}__max"></mat-datepicker-toggle>
    <mat-datepicker #picker_{{=f.names.underscore}}__max></mat-datepicker>
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} max -->
{{??f.type==='boolean'}}
<!-- {{=f.names.wordsUpper}} -->
<mat-form-field class="w-100">
    <mat-select placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}' | translate {{=it.c}}"
                (change)="onChange();"
                [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}">
        <mat-option>{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}_any' | translate {{=it.c}}</mat-option>
        <mat-option [value]="false">{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}_false' | translate {{=it.c}}</mat-option>
        <mat-option [value]="true">{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}_true' | translate {{=it.c}}</mat-option>
    </mat-select>
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} -->
{{??f.type==='entity'}}
<!-- {{=f.names.wordsUpper}} -->
<mat-form-field class="w-100">
    <mat-select placeholder="{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}' | translate {{=it.c}}"
                (change)="onChange();"
                [(ngModel)]="{{=it.m.names.lowerCamel}}SearchParams.props.{{=f.names.underscore}}">
        <mat-option>{{=it.o}} '{{=it.m.names.underscore}}_filter_{{=f.names.underscore}}_any' | translate {{=it.c}}</mat-option>
        <mat-option *ngFor="let {{=f.names.lowerCamel}} of {{=f.names.lowerCamel}}List" [value]="{{=f.names.lowerCamel}}.getId()">{{=it.o}} {{=f.names.lowerCamel}}.getLabel() {{=it.c}}</mat-option>
    </mat-select>
</mat-form-field>
<!-- /{{=f.names.wordsUpper}} -->
{{?}}
{{~}}
