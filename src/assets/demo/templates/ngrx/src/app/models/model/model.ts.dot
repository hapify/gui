{{ function type(f) {
  let out = "";

  if (f.type === "boolean") out += "boolean";
  else if (f.type === "string") out += "string";
  else if (f.type === "number") out += "number";
  else if (f.type === "datetime") out += "number | Date";
  else if (f.type === "entity") out += `string | ${f.m.names.upperCamel} | ${f.m.names.upperCamel}Interface`;
  else out += "any";

  if (f.nullable) out += " | null";

  return out;
}
function labels(lbs) {
    return lbs
        .map(lb => "${this.props."+lb.names.underscore+"}")
        .join(' ');
}
}}import {Helpers} from '@app/shared';
import {Subject} from 'rxjs/Subject';{{~it.m.d.l: d}}
import {{{=d.names.upperCamel}}, {{=d.names.upperCamel}}Interface} from '../{{=d.names.hyphen}}/{{=d.names.hyphen}}';{{~}}

export interface {{=it.m.names.upperCamel}}Interface {{{~it.m.f.l : f}}
  {{=f.names.underscore}}?: {{ out += type(f); }};{{~}}
}

export class {{=it.m.names.upperCamel}} extends Subject<void> {

  /**
   * Store {{=it.m.names.wordsLower}} properties
   */
  props: {{=it.m.names.upperCamel}}Interface = {};

  /**
   * Constructor
   */
  constructor() {
    super();
  }

  /**
   * Short function to get id
   *
   * @return {string}
   */
  getId(): string {
    return this.props.{{=it.m.f.p.names.underscore}};
  }

  /**
   * Short function to get label of instance
   *
   * @return {string}
   */
  getLabel(): string {{{?it.m.f.lb.length}}
    return `{{ out += labels(it.m.f.lb); }}`{{??}}
    return this.props.{{=it.m.f.p.names.underscore}};{{?}}
  }

  /**
   * Denotes if the instance has been created or already exists in the API
   *
   * @return {boolean}
   */
  isNew(): boolean {
    return !this.getId();
  }

  /**
   * Denotes if the instance has been populated
   *
   * @return {boolean}
   */
  exists(): boolean {
    return typeof this.getId() !== 'undefined';
  }

  /**
   * Populate the current instance from an object
   *
   * @param {{{=it.m.names.upperCamel}}Interface} object
   */
  fromObject(object: {{=it.m.names.upperCamel}}Interface): void {
    this.props = Object.assign({}, object);{{~it.m.f.se : f}}{{? f.type === 'datetime' }}
    this.props.{{=f.names.underscore}} = Helpers.convertToDate(this.props.{{=f.names.underscore}});{{?}}{{~}}{{~it.m.f.r: r}}
    if (typeof this.props.{{=r.names.underscore}} === 'object') {
        const {{=r.names.lowerCamel}} = new {{=r.m.names.upperCamel}}();
        {{=r.names.lowerCamel}}.fromObject(<{{=r.m.names.upperCamel}}Interface>this.props.{{=r.names.underscore}});
        this.props.{{=r.names.underscore}} = {{=r.names.lowerCamel}}
    }{{~}}
  }

  /**
   * Convert the current instance to an object
   *
   * @return {{{=it.m.names.upperCamel}}Interface}
   */
  toObject(): {{=it.m.names.upperCamel}}Interface {
    const props = Object.assign({}, this.props);{{~it.m.f.se : f}}{{? f.type === 'datetime' }}
    props.{{=f.names.underscore}} = Helpers.convertToTimestamp(props.{{=f.names.underscore}});{{?}}{{~}}{{~it.m.f.r: r}}
    if (props.{{=r.names.underscore}} instanceof {{=r.m.names.upperCamel}}) {
        props.{{=r.names.underscore}} = props.{{=r.names.underscore}}.toObject();
    }{{~}}
    return props;
  }
}
