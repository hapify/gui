{{ function type(f) {
  if (f.type === "boolean") return "boolean";
  if (f.type === "string") return "string";
  if (f.type === "number") return "number";
  if (f.type === "datetime") return "number | Date";
  if (f.type === "entity") return "string";
  return "any";
}
}}import {Helpers} from '@app/shared';

export interface {{=it.m.names.upperCamel}}Interface {{{~it.m.f.l : f}}
  {{=f.names.underscore}}?: {{ out += type(f); }};{{~}}
}

export class {{=it.m.names.upperCamel}} {

  /**
   * Store {{=it.m.names.wordsLower}} properties
   */
  props: {{=it.m.names.upperCamel}}Interface = {};

  /**
   * Constructor
   */
  constructor() {
  }

  /**
   * Short function to get id
   *
   * @return {string}
   */
  getId() {
    return this.props.{{=it.m.f.p.names.underscore}};
  }

  /**
   * Short function to get label of instance
   *
   * @return {string}
   */
  getLabel() {
    return this.props._id;
  }

  /**
   * Denotes if the instance has been created or already exists in the API
   *
   * @return {boolean}
   */
  isNew() {
    return !this.props._id;
  }

  /**
   * Populate the current instance from an object
   *
   * @param {{{=it.m.names.upperCamel}}Interface} object
   */
  fromObject(object: {{=it.m.names.upperCamel}}Interface) {
    this.props = Object.assign({}, object);{{~it.m.f.se : f}}{{? f.type === 'datetime' }}
    this.props.{{=f.names.underscore}} = Helpers.convertToDate(this.props.{{=f.names.underscore}});{{?}}{{~}}
  }

  /**
   * Convert the current instance to an object
   *
   * @return {{{=it.m.names.upperCamel}}Interface}
   */
  toObject(): {{=it.m.names.upperCamel}}Interface {
    const props = Object.assign({}, this.props);{{~it.m.f.se : f}}{{? f.type === 'datetime' }}
    props.{{=f.names.underscore}} = Helpers.convertToTimestamp(props.{{=f.names.underscore}});{{?}}{{~}}
    return props;
  }
}
