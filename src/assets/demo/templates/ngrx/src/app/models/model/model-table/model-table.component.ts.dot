import {Component, OnInit, Input, ViewChild, OnDestroy} from '@angular/core';
import {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';
import {Subscription} from 'rxjs/Subscription';
import {ErrorService} from '@app/messages';
import {{{=it.m.names.upperCamel}}SearchParams} from '../{{=it.m.names.hyphen}}-search-params';
import {{{=it.m.names.upperCamel}}Service} from '../{{=it.m.names.hyphen}}.service';
import {{{=it.m.names.upperCamel}}} from '../{{=it.m.names.hyphen}}';

@Component({
  selector: 'anms-{{=it.m.names.hyphen}}-table',
  templateUrl: './{{=it.m.names.hyphen}}-table.component.html',
  styleUrls: ['./{{=it.m.names.hyphen}}-table.component.scss']
})
export class {{=it.m.names.upperCamel}}TableComponent implements OnInit, OnDestroy {

  /**
   * The search params
   *
   * @type {{{=it.m.names.upperCamel}}SearchParams}
   */
  @Input() {{=it.m.names.lowerCamel}}SearchParams: {{=it.m.names.upperCamel}}SearchParams;

  /**
   * Raised if the list in being updated
   *
   * @type {boolean}
   */
  refreshing: boolean = false;

  /**
   * Delay to show loading spinner
   * Avoid blinking effect on fast APIs
   *
   * @type {number}
   */
  refreshingDelay = 200;

  /**
   * Subscription to the tables events
   *
   * @type {Subscription[]}
   */
  private _subscriptions: Subscription[] = [];

  /**
   * Columns to show
   *
   * @type {[string]}
   */
  columns = [{{~it.m.f.l : f}}{{? !f.isPrivate }}
    '{{=f.names.underscore}}',{{?}}{{~}}
  ];

  /**
   * Data wrapper for MatTable
   *
   * @type {MatTableDataSource<{{=it.m.names.upperCamel}}>}
   */
  dataSource: MatTableDataSource<{{=it.m.names.upperCamel}}> = new MatTableDataSource();

  /**
   * Length of the received results
   *
   * @type {number}
   */
  total = 0;

  /**
   * Paginator sub view
   */
  @ViewChild(MatPaginator) paginator: MatPaginator;

  /**
   * Sort sub view
   */
  @ViewChild(MatSort) sort: MatSort;

  /**
   * Constructor
   *
   * @param {{{=it.m.names.upperCamel}}Service} {{=it.m.names.lowerCamel}}Service
   * @param {ErrorService} errorService
   */
  constructor(private {{=it.m.names.lowerCamel}}Service: {{=it.m.names.upperCamel}}Service,
              private errorService: ErrorService) {
  }

  /**
   * Init
   */
  ngOnInit() {
    // Subscriptions
    this._subscriptions = [
      this.sort.sortChange.subscribe(() => {
        // If the {{=it.m.names.wordsLower}} changes the sort order, reset back to the first page.
        this.paginator.pageIndex = 0;
        this._update();
      }),
      this.paginator.page.subscribe(() => {
        this._update();
      }),
      this.{{=it.m.names.lowerCamel}}SearchParams.subscribe(() => {
        this._refresh();
      })
    ];
    // Refresh once on startup
    this._refresh();
  }

  /**
   * Destroy
   */
  ngOnDestroy() {
    this._subscriptions.map(s => s.unsubscribe());
  }

  /**
   * Update data
   *
   * @private
   */
  private _update(): void {
    // Copy controls to params
    this.{{=it.m.names.lowerCamel}}SearchParams.props._page = this.paginator.pageIndex;
    this.{{=it.m.names.lowerCamel}}SearchParams.props._limit = this.paginator.pageSize;
    this.{{=it.m.names.lowerCamel}}SearchParams.props._sort = this.sort.active;
    this.{{=it.m.names.lowerCamel}}SearchParams.props._order = this.sort.direction;
    // Trigger update
    this.{{=it.m.names.lowerCamel}}SearchParams.next();
  }

  /**
   * Refresh data from search params
   *
   * @private
   */
  private _refresh(): void {
    const params = this.{{=it.m.names.lowerCamel}}SearchParams.toObject();
    // Set refreshing flag
    const refreshTimeout = setTimeout(() => {
      this.refreshing = true;
    }, this.refreshingDelay);
    // Get list
    this.{{=it.m.names.lowerCamel}}Service.list(params)
      .then((results) => {
        // Link data
        this.dataSource.data = results.items;
        this.total = results.total;
      })
      .catch((error) => this.errorService.handle(error))
      .then(() => {
        clearTimeout(refreshTimeout);
        this.refreshing = false;
      });
  }

}
