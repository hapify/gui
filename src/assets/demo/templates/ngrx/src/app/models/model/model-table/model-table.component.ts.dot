import {Component, OnInit, Input, ViewChild, OnDestroy} from '@angular/core';
import {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';
import {Subscription} from 'rxjs/Subscription';
import {Observable} from 'rxjs/Observable';
import {{{=it.m.names.upperCamel}}SearchParams} from '../{{=it.m.names.hyphen}}-search-params';
import {{{=it.m.names.upperCamel}}ListInterface} from '../{{=it.m.names.hyphen}}.service';
import {{{=it.m.names.upperCamel}}} from '../{{=it.m.names.hyphen}}';

@Component({
  selector: 'anms-{{=it.m.names.hyphen}}-table',
  templateUrl: './{{=it.m.names.hyphen}}-table.component.html',
  styleUrls: ['./{{=it.m.names.hyphen}}-table.component.scss']
})
export class {{=it.m.names.upperCamel}}TableComponent implements OnInit, OnDestroy {

  /**
   * The search params
   *
   * @type {{{=it.m.names.upperCamel}}SearchParams}
   */
  @Input() {{=it.m.names.lowerCamel}}SearchParams: {{=it.m.names.upperCamel}}SearchParams;

  /**
   * The search results
   *
   * @type {Observable<{{=it.m.names.upperCamel}}ListInterface>}
   */
  @Input() {{=it.m.names.lowerCamel}}List: Observable<{{=it.m.names.upperCamel}}ListInterface>;

  /**
   * Raised if the list in being updated
   *
   * @type {boolean}
   */
  @Input() refreshing: boolean;

  /**
   * Subscription to the tables events
   *
   * @type {Subscription[]}
   */
  private _subscriptions: Subscription[] = [];

  /**
   * Columns to show
   *
   * @type {[string]}
   */
  columns = [{{~it.m.f.l : f}}{{? !f.private }}
    '{{=f.names.underscore}}',{{?}}{{~}}
  ];

  /**
   * Data wrapper for MatTable
   *
   * @type {MatTableDataSource<{{=it.m.names.upperCamel}}>}
   */
  dataSource: MatTableDataSource<{{=it.m.names.upperCamel}}> = new MatTableDataSource();

  /**
   * Length of the received results
   *
   * @type {number}
   */
  total = 0;

  /**
   * Paginator sub view
   */
  @ViewChild(MatPaginator) paginator: MatPaginator;

  /**
   * Sort sub view
   */
  @ViewChild(MatSort) sort: MatSort;

  /**
   * Constructor
   */
  constructor() {
  }

  /**
   * Init
   */
  ngOnInit() {
    // Empty data
    this._subscriptions = [
      this.sort.sortChange.subscribe(() => {
        // If the {{=it.m.names.wordsLower}} changes the sort order, reset back to the first page.
        this.paginator.pageIndex = 0;
        this._update();
      }),
      this.paginator.page.subscribe(() => {
        this._update();
      }),
      this.{{=it.m.names.lowerCamel}}List.subscribe((data: {{=it.m.names.upperCamel}}ListInterface) => {
        // Link data
        this.dataSource.data = data.items;
        this.total = data.total;
      })
    ];

  }

  /**
   * Destroy
   */
  ngOnDestroy() {
    this._subscriptions.map(s => s.unsubscribe());
  }

  /**
   * Update data
   *
   * @private
   */
  private _update(): void {
    // Copy controls to params
    this.{{=it.m.names.lowerCamel}}SearchParams.props._page = this.paginator.pageIndex;
    this.{{=it.m.names.lowerCamel}}SearchParams.props._limit = this.paginator.pageSize;
    this.{{=it.m.names.lowerCamel}}SearchParams.props._sort = this.sort.active;
    this.{{=it.m.names.lowerCamel}}SearchParams.props._order = this.sort.direction;
    // Trigger update
    this.{{=it.m.names.lowerCamel}}SearchParams.next();
  }

}
