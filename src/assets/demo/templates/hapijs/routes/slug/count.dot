{{
function joiValidator(f) {
    var prop = f.names.underscore;
    if (f.type === "boolean") return prop + ": Joi.boolean(),";
    if (f.type === "string") return prop + ": Joi.string(),";
    if (f.type === "number" || f.type === "datetime") {
        return prop + ": Joi.number(),\n    " + prop + "__min: Joi.number(),\n    " + prop + "__max: Joi.number(),";
    }
    if (f.type === "entity") return prop + ": Joi.string().length(24).hex(),";
    return "null";
}
}}{{
function validList(fs) {
    return fs.map(function(f) { return "'"+f.names.underscore+"'"; }).join(', ');
}
}}'use strict';
/**
 * Count {{=it.m.names.wordsLower}}
 */

const Joi = require('joi');
const Boom = require('boom');
const MongoDB = require('mongodb');

// Validation schema for query
const schema = Joi.object({ {{~it.m.f.se : f}}
    {{ out += joiValidator(f); }}{{~}}
}){{~it.m.f.se : f}}{{?f.type == 'number' || f.type == 'datetime'}}
    .without('{{=f.names.underscore }}', ['{{=f.names.underscore }}__min', '{{=f.names.underscore }}__max']){{?}}{{~}};

/**
 * Export route to count {{=it.m.names.wordsLower}}
 */
module.exports = {
    method: 'GET',
    path: '/{{=it.m.names.hyphen}}/count',
    config: {
        validate: { query: schema },
        description: 'Route to count {{=it.m.names.wordsLower}}',
        tags: ['{{=it.m.names.hyphen}}', 'count']
    },
    handler: (request, reply) => {

        // Build filter from query
        const filter = Object.assign({}, request.query);
{{~it.m.f.se : f}}{{?f.type == 'number' || f.type == 'datetime'}}
        // Set min for {{=f.names.wordsLower }} if defined
        if (typeof filter.{{=f.names.underscore }}__min !== 'undefined') {
            filter.{{=f.names.underscore }} = filter.{{=f.names.underscore }} || {};
            filter.{{=f.names.underscore }}.$gte = filter.{{=f.names.underscore }}__min;
            delete filter.{{=f.names.underscore }}__min;
        }
        // Set max for {{=f.names.wordsLower }} if defined
        if (typeof filter.{{=f.names.underscore }}__max !== 'undefined') {
            filter.{{=f.names.underscore }} = filter.{{=f.names.underscore }} || {};
            filter.{{=f.names.underscore }}.$lte = filter.{{=f.names.underscore }}__max;
            delete filter.{{=f.names.underscore }}__max;
        }
{{??f.type=='entity'}}
        // Convert MongoId for {{=f.names.wordsLower }}
        if (filter.{{=f.names.underscore }}) {
            filter.{{=f.names.underscore }} = new MongoDB.ObjectId(filter.{{=f.names.underscore }});
        }
{{??f.type=='string' && f.label}}
        // Use regexp for {{=f.names.wordsLower }}
        if (filter.{{=f.names.underscore }}) {
            filter.{{=f.names.underscore }} = new RegExp(filter.{{=f.names.underscore }}, 'i');
        }
{{?}}{{~}}

        // Count {{=it.m.names.wordsLower}} from database
        request.server.db.collection('{{=it.m.names.underscore}}')
            .find(filter)
            .count()
            .then((total) => {
                reply({ total });
            })
            .catch((e) => reply(Boom.boomify(e)));
    }
};

