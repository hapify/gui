'use strict';
/**
 * Read {{=it.m.names.wordsLower}}
 */

const Joi = require('joi');
const Boom = require('boom');
const MongoDB = require('mongodb');

/**
 * Reject if the result is empty
 *
 * @param {Object} error
 * @returns {Function}
 */
const screamIfNoResult = (error) => (result) => !result ? Promise.reject(error) : result;

// Validation schema for params
const schema = Joi.object({
    {{=it.m.f.p.names.underscore}}: Joi.string().length(24).hex().required()
});

/**
 * Export route to get {{=it.m.names.wordsLower}}
 */
module.exports = {
    method: 'GET',
    path: '/{{=it.m.names.hyphen}}/{{{=it.m.f.p.names.underscore}}}',
    config: {
        validate: { params: schema },
        description: 'Route to get {{=it.m.names.wordsLower}}',
        tags: ['{{=it.m.names.hyphen}}', 'read']
    },
    handler: (request, reply) => {

        // Get {{=it.m.names.wordsLower}} {{=it.m.f.p.names.wordsLower}}
        const {{=it.m.f.p.names.underscore}} = new MongoDB.ObjectId(request.params.{{=it.m.f.p.names.underscore}});
{{?it.m.f.ip.length}}
        // Build projection for filtering private fields
        const projection = { {{~it.m.f.ip : f}}
            {{=f.names.underscore }}: false,{{~}}
        };
{{?}}
        // Get {{=it.m.names.wordsLower}} from database
        request.server.db.collection('{{=it.m.names.underscore}}')
            .findOne({ {{=it.m.f.p.names.underscore}}: {{=it.m.f.p.names.underscore}} }{{?it.m.f.ip.length}}, projection{{?}})
            .then(screamIfNoResult(Boom.notFound('{{=it.m.names.wordsUpper}} not found'))){{?it.m.f.r.length}}
            .then((result) => {

                const {{=it.m.names.underscore}} = result;

                // Convert reference fields
                const promises = [];{{~it.m.f.r : r}}

                // Append {{=r.names.wordsLower}}{{?r.m.f.ip.length}}
                const projection{{=r.names.upperCamel}} = { {{~r.m.f.ip : f}}
                    {{=f.names.underscore }}: false,{{~}}
                };{{?}}
                promises.push(request.server.db.collection('{{=r.m.names.underscore}}')
                  .findOne({ {{=r.m.f.p.names.underscore}}: new MongoDB.ObjectId(result.{{=r.names.underscore}}) }{{?r.m.f.ip.length}}, projection{{=r.names.upperCamel}}{{?}})
                  .then((reference) => {
                    {{=it.m.names.underscore}}.{{=r.names.underscore}} = reference;
                  }));{{~}}

                // Run promises
                return Promise.all(promises)
                  .then(() => {
                    reply({{=it.m.names.underscore}});
                  });
            }){{?}}{{?!it.m.f.r.length}}
            .then(reply){{?}}
            .catch((e) => reply(Boom.boomify(e)));
    }
};

