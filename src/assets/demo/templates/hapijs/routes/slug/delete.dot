'use strict';
/**
 * Delete {{=it.m.names.wordsLower}}
 */

const Joi = require('joi');
const Boom = require('boom');
const MongoDB = require('mongodb');

// Validation schema for params
const schema = Joi.object({
    {{=it.m.f.p.names.underscore}}: Joi.string().length(24).hex().required()
});

/**
 * Scream if no deletion has been done or return the MongoDB response
 *
 * @param {Object} error
 * @returns {Function}
 */
const screamIfNoDeletion = (error) => (r) => (r.deletedCount === 0 ? Promise.reject(error) : r);

/**
 * Export route to delete {{=it.m.names.wordsLower}}
 */
module.exports = {
    method: 'DELETE',
    path: '/{{=it.m.names.hyphen}}/{{{=it.m.f.p.names.underscore}}}',
    config: {
        validate: { params: schema },
        description: 'Route to delete {{=it.m.names.wordsLower}}',
        tags: ['{{=it.m.names.hyphen}}', 'delete']
    },
    handler: (request, reply) => {

        // Get {{=it.m.names.wordsLower}} {{=it.m.f.p.names.wordsLower}}
        const {{=it.m.f.p.names.underscore}} = new MongoDB.ObjectId(request.params.{{=it.m.f.p.names.underscore}});

        // Remove {{=it.m.names.wordsLower}} from database
        request.server.db.collection('{{=it.m.names.underscore}}')
            .deleteOne({ {{=it.m.f.p.names.raw}}: {{=it.m.f.p.names.underscore}} })
            .then(screamIfNoDeletion(Boom.notFound('{{=it.m.names.wordsUpper}} not found')))
            .then(() => {
                reply().code(204);
            })
            .catch((e) => reply(Boom.boomify(e)));
    }
};

