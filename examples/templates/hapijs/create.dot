<script>
{{ function defaultValue(f) {
  if (f.type === "boolean") return "false";
  if (f.type === "string") return "''";
  if (f.type === "number") return "0";
  return "null";
}
}}'use strict';
/**
 * Create {{=it.m.names.wordsLower}}.
 * Returns the created {{=it.m.names.wordsLower}}.
 */

const Joi = require('joi');
const Boom = require('boom');

// Validation schema for payload
const schema = Joi.object({ {{~it.m.f.l : f}}{{?!f.internal}}
    {{=f.names.underscore}}: Joi.{{=f.type}}().required(),{{?}}{{~}}
});

/**
 * Add route to create {{=it.m.names.wordsLower}}
 */
server.route({
    method: 'POST',
    path: `/{{=it.m.names.hyphen}}`,
    config: {
        validate: {
            payload: schema
        }
    },
    handler: (request, reply) => {

        // Get {{=it.m.names.wordsLower}} from payload
        const {{=it.m.names.underscore}} = request.payload;
{{?it.m.f.i.length}}
        // Init internal fields{{~it.m.f.i : i}}{{?!i.primary}}
        {{=it.m.names.underscore}}.{{=i.names.raw}} = {{ out += defaultValue(i); }};{{?}}{{~}}
{{?}}
        // Insertion options
        const options = { w: 'majority' };

        // Insert {{=it.m.names.wordsLower}} into database
        request.server.db.collection('{{=it.m.names.underscore}}')
            .insertOne({{=it.m.names.underscore}}, options)
            .then((results) => {

                const {{=it.m.names.underscore}} = results;
{{?it.m.f.ip.length}}
                // Delete private properties{{~it.m.f.ip : p}}
                delete {{=it.m.names.underscore}}.{{=p.names.raw}};{{~}}
{{?}}
                reply({{=it.m.names.underscore}}).code(201);
            })
            .catch((e) => reply(Boom.boomify(e)));
    }
});
</script>
